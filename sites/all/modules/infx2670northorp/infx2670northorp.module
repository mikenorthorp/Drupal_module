<?php
// Defines a menu hook to display the page at a custom url
function infx2670northorp_menu() {

	// Custom url at infx2670northorp/form for the form page
	$items['infx2670northorp/form'] = array(
		// Title of the page
		'title' => 'infx2670northorp Form',
		// Description of the form page
		'description' => 'infx2670northorp Form Page',
		// Use drupals get form function to get the form data
		'page callback' => 'drupal_get_form',
		// call the form function
		'page arguments' => array('infx2670northorp_form'),
		'access callback' => TRUE,
		// Set as a normal menu item
		'type' => MENU_NORMAL_ITEM,
	);

	// Set up content page to view submissions
	// This is a form due to the way of deleting records..
	$items['infx2670northorp/view'] = array(
		// Title
		'title' => 'infx2670northorp View Form Submissions',
		// Description
		'description' => 'View Form Submissions',
		// Callback to drupal get form
		'page callback' => 'drupal_get_form',
		// Function for content display
	    'page arguments' => array('infx2670northorp_plainpage'),
		'access callback' => TRUE,
		// Set as normal menu item
		'type' => MENU_NORMAL_ITEM,
	);

	// Set up admin page to configure form fields
	$items['admin/config/content/infx2670northorp'] = array(
		// Set title
	    'title' => 'infx2670northorp Survey Form Configuration',
	    // Set description
	    'description' => 'Survey Form Configuration',
	    // Callback to get form
	    'page callback' => 'drupal_get_form',
	    // Call the function for configuration
	    'page arguments' => array('infx2670northorp_configuration'),
	    // Set page access
	    'access arguments' => array('access administration pages'),
	    // Display as normal menu item
	    'type' => MENU_NORMAL_ITEM,
	);

	// Return the items array
	return $items;
}

// This shows the configuration settings for the administrator
function infx2670northorp_configuration($form, &$form_state) {
	// Set checkboxes for each field type
	// All values set to enabled by default (0)
	// Or they are set to their last known value

	// Enable or disable the entire form
	$form['inputGroup_disabled'] = array(
		'#type' => 'checkbox',
		'#title' => t('Check To Disable The Entire Form'),
		'#default_value' => variable_get('inputGroup_disabled', 0),
	);

	// Age diabled
	$form['age_disabled'] = array(
		'#type' => 'checkbox',
		'#title' => t('Check To Disable The Age Field'),
		'#default_value' => variable_get('age_disabled', 0),
	);

	// Colors disabled
	$form['colors_disabled'] = array(
		'#type' => 'checkbox',
		'#title' => t('Check To Disable The Colors Field'),
		'#default_value' => variable_get('colors_disabled', 0),
	);

	// Gender disabled
	$form['gender_disabled'] = array(
		'#type' => 'checkbox',
		'#title' => t('Check To Disable The Gender Field'),
		'#default_value' => variable_get('gender_disabled', 0),
	);

	// Music disabled
	$form['music_disabled'] = array(
		'#type' => 'checkbox',
		'#title' => t('Check To Disable The Music Field'),
		'#default_value' => variable_get('music_disabled', 0),
	);

	// Movie disabled
	$form['movie_disabled'] = array(
		'#type' => 'checkbox',
		'#title' => t('Check To Disable The Movies Field'),
		'#default_value' => variable_get('movie_disabled', 0),
	);

	// Day disabled
	$form['day_disabled'] = array(
		'#type' => 'checkbox',
		'#title' => t('Check To Disable The Day Field'),
		'#default_value' => variable_get('day_disabled', 0),
	);

	// Thank you message setter
	$form['thank_you_message'] = array(
		'#type' => 'textfield',
		'#title' => t('Thank You Message'),
	   	'#description' => t('Enter the thank you message shown on sucessful page submit.'),
	    '#size' => 100,
	   	'#required' => TRUE,
	   	'#default_value' => variable_get('thank_you_message', "Your answers have been successfully submitted, thanks!"),
	);

	// Return the system settings form
  	return system_settings_form($form);
}

// This callback creates a page in the module to display submission data
function infx2670northorp_plainpage() {
	// Get the global user variable 
	global $user;
	$user_id = $user->uid;

	$isAdmin = false;
	if($user_id == 1) {
		$isAdmin = true;
	}

	$output = '';

	// Set up top message
	$output .= token_replace(t('<p>Welcome to the forms submitted [current-user:name]!</p>'));
	$output .= t("<p>Below you can see all of the forms submitted and delete them if you are an admin.</p>");

	// Grab the results 
	$result = db_select('infx2670northorp_form')
		->fields('infx2670northorp_form', array('submission_id', 'fname', 'lname', 'age', 'colors', 'gender', 'music', 'movie', 'day', 'user_id', 'created'))
		->execute()
		->fetchAllAssoc('submission_id');

	// Set up headers for all the database inputs
	$header = array("Submission ID", "First Name", "Last Name", "Age", "Colors", "Gender", "Music", "Movie", "Day", "User ID", "Created On");

	// Add each result to the rows array
	foreach ($result as $result_row) {
		$filteredRow = array($result_row->submission_id, $result_row->fname, $result_row->lname, $result_row->age, $result_row->colors, $result_row->gender, $result_row->music, $result_row->movie, $result_row->day, $result_row->user_id, date('Y-m-d H:i:s', $result_row->created));

		// Remove any disabled fields from this row
		if(variable_get('age_disabled')) {
			unset($filteredRow[3]);
		}
		if(variable_get('colors_disabled')) {
			unset($filteredRow[4]);
		}
		if(variable_get('gender_disabled')) {
			unset($filteredRow[5]);
		}
		if(variable_get('music_disabled')) {
			unset($filteredRow[6]);
		}
		if(variable_get('movie_disabled')) {
			unset($filteredRow[7]);
		}
		if(variable_get('day_disabled')) {
			unset($filteredRow[8]);
		}

		// Set rows = to the filtered row
		$rows[] = $filteredRow;
	}

	// Remove elements from header as well
	if(variable_get('age_disabled')) {
		unset($header[3]);
	}

	if(variable_get('colors_disabled')) {
		unset($header[4]);
	}

	if(variable_get('gender_disabled')) {
		unset($header[5]);
	}

	if(variable_get('music_disabled')) {
		unset($header[6]);
	}

	if(variable_get('movie_disabled')) {
		unset($header[7]);
	}

	if(variable_get('day_disabled')) {
		unset($header[8]);
	}

	// Go through all the rows and add them to output in table format
	if (!empty($rows)) {
		$output .= theme('table', array('header' => $header, 'rows' => $rows));
	}

	// Could not get links and hooks working to delete a record, so using a form with a text field and button below
	// to remove fields.. 

	// Output the page with one form, 2nd form allows deletion of rows
	$form['page_output'] = array(
		// Set to markup type so we can display the page output
		'#type' => 'markup', 
		// Set it to the output
		'#markup' => $output,
	);

	$form['submission_id'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Delete Row'),
	   	'#description' => t('To delete a row, enter the Submission ID here'),
	    '#size' => 5,
	    // Custom validation function
	    '#element_validate' => array('element_validate_number'),
	   	'#required' => TRUE,
	);

	// Submit button to delete row
	$form['submit'] = array(
	   '#type' => 'submit',
	   '#value' => t('Delete Row'),
	);

	// Return the form to the submit callback which displays the page output as well
	return $form;
}

// Submit logic when user wants to delete a row
function infx2670northorp_plainpage_submit($form, &$form_state) {
	// Delete the row 
	$delete = db_delete('infx2670northorp_form')
		->condition('submission_id', $form_state['values']['submission_id'])
		->execute();

	// Display message to user
	drupal_set_message(t("The row with Submission ID" . $form_state['values']['submission_id'] . " has been removed!"));
}

// This function defines the form field
function infx2670northorp_form($form, &$form_state) {
	// Fieldset to contain all the field types
	// Check if disabled, then disable whole form inside the fieldset
	if(!variable_get('inputGroup_disabled')) {
		$form['inputGroup'] = array(
			'#type' => 'fieldset', 
			'#title' => t('Favorites Survey'), 
			'#weight' => 5, 
			'#collapsible' => TRUE, 
			'#collapsed' => FALSE,
		);

		// Make a textfield and required
		$form['inputGroup']['fname'] = array(
		    '#type' => 'textfield',
		    '#title' => 'First Name',
		    '#size' => 20,
		    '#maxlength' => 20,
		    // Make this field required
		    '#required' => TRUE, 
	  	);

	  	// Make a textfield and required
		$form['inputGroup']['lname'] = array(
		    '#type' => 'textfield',
		    '#title' => 'Last Name',
		    '#size' => 20,
		    '#maxlength' => 20,
		    // Make this field required
		    '#required' => TRUE, 
	  	);

		// Check if age field disabled
		if(!variable_get('age_disabled')) {
			// Make a textfield for age
		  	$form['inputGroup']['age'] = array(
			    '#type' => 'textfield',
			    '#title' => 'Age',
			    '#size' => 4,
			    '#maxlength' => 3,
			    // Custom validation function
			    '#element_validate' => array('element_validate_number'),
		  	);
	 	}

	 	// Check if colors field disabled
		if(!variable_get('colors_disabled')) {
		  	// Select dropdown box for colors
			$form['inputGroup']['colors'] = array(
				'#type' => 'select',
				'#title' => t('Please Select Your Favorite Color'),
				'#options' => array(
					0 => t('-Select Color From Dropdown-'),
					1 => t('Green'),
					2 => t('Red'),
					3 => t('Yellow'),
					4 => t('Purple'),
					5 => t('Orange'),
					6 => t('Black'),
					8 => t('Blue'),
					9 => t('None of Above'),
				),
			);
		}

		// Check if gender field disabled
		if(!variable_get('gender_disabled')) {
			// Radio buttons for gender select
			$form['inputGroup']['gender'] = array(
				'#type' => 'radios',
				'#title' => t('What Is Your Gender'),
				'#options' => array(
					0 => t('Male'),
					1 => t('Female'),
					2 => t('Prefer Not To Say'),
				),
				// Set default value
				'#default_value' => 2,
			);
		}

		// Check if music field disabled
		if(!variable_get('music_disabled')) {
			// This creates a series of checkboxes for music likes
			$form['inputGroup']['music'] = array(
				'#type' => 'checkboxes',
				'#title' => t('Select Music You Like'),
				'#options' => array(
					1 => t('Rock'),
					2 => t('Country'),
					3 => t('Indie'),
					4 => t('Hip Hop'),
					5 => t('Rap'),
					6 => t('Dubstep'),
					7 => t('Pop'),
				),
			);
		}

		// Check if movie field disabled
		if(!variable_get('movie_disabled')) {
			// This defines a text area
			$form['inputGroup']['movie'] = array(
				'#title' => t('Favorite Movie(s)'),
				'#type' => 'textarea',
				'#cols' => 50, 
				'#rows' => 3,
				'#description' => t('Please enter your favorite movie or movies in the textfield (do not enter Son Of The Mask as it is a horrible movie...)'),
			);
		}

		// Check if day field disabled
		if(!variable_get('day_disabled')) {
			// This gets the favorite day of the person using the date_api
			// Set the format of the date picker
			$format = 'Y-m-d';
			// Default value of start of 2000
			$date = '2000-01-01';
			// Configure the date option for favorite day
			$form['inputGroup']['day'] = array(
				// Use the date select from the date module
				'#type' => 'date_select',
				'#title' => t('Pick Your Favorite Date'),
				// Set default value to Y2K
				'#default_value' => $date,
				'#date_format' => $format,
				'#date_year_range' => '-80:+50',
				// Makes sure the date is valid, bug with the checkdate though so it displays additional error if 
				// a date is invalid
				'#element_validate' => array('date_validate'),
			);
		}

		// This defines a submit button	
		$form['inputGroup']['submit'] = array(
			'#type' => 'submit',
			// Output submit and wrap with translation support
			'#value' => t('Submit'),
		);
	}

	// Return the form object to output
	return $form;
}

// Validate form fields with custom validation
// Also used drupal validation functions in some form elements
function infx2670northorp_form_validate($form, &$form_state) {
	// Check to make sure they selected a color from the dropdown
	// Only do check if colors is enabled
	if(!variable_get('colors_disabled')) {
		if ($form_state['values']['colors'] == 0) {
			form_set_error('colors', t('You must select a color option from the dropdown.'));
		}
	}

	// Only do check if movie is enabled
	if(!variable_get('movie_disabled')) {
		// Check if movies textarea contains son of the mask (case insensitive)
		if(stristr($form_state['values']['movie'], 'son of the mask')  !== false) {
			form_set_error('movie', t('Please remove Son of the Mask from your favorite movies.'));
		}
	}
}

// This function submits the form and saves the values in a table
function infx2670northorp_form_submit($form, &$form_state) {
	// Get the user ID of the current user
	global $user;
	$user_id = "" . $user->uid;

	// Create variables for all fields and set them to empty strings (incase of disabled)
	$ageValue = "";
	$colorValue = "";
	$genderValue = "";
	$musicList = "";
	$movieValue = "";
	$dayValue = "";

	// Check if music list is null
	if($form_state['values']['music'] != NULL) {
		//Get the id's of the checked checkboxes (found on stack overflow)
		$checked = array_intersect(
		  array_keys($form_state['values']['music']),
		  array_values($form_state['values']['music'])
		);

		// Go through each music value and add it to the list
		foreach ($checked as $key => $value) {
		   	$musicList .= $form['inputGroup']['music']['#options'][$value] . ", ";
		}
	}

	// Check if age is null
	if($form_state['values']['age'] != NULL) {
		$ageValue = $form_state['values']['age'];
	}

	// Check if movie is null
	if($form_state['values']['movie'] != NULL) {
		$movieValue = $form_state['values']['movie'];
	}

	// check if day is null
	if($form_state['values']['day'] != NULL) {
		$dayValue = $form_state['values']['day'];
	}

	// Check if colors are null
	if($form_state['values']['colors'] != NULL) {
		// Get the key of the colors field
		$field_key = $form_state['values']['colors'];
		// Get the value for that color
		$colorValue = $form['inputGroup']['colors']['#options'][$field_key];
	}

	// Check if gender is null
	if($form_state['values']['gender'] != NULL) {
		// Get the key of the gender field
		$field_key = $form_state['values']['gender'];
		// Get the value for that gender
		$genderValue = $form['inputGroup']['gender']['#options'][$field_key];
	}

	// DB query
	$save = db_insert('infx2670northorp_form')
	->fields(array(
		'fname' => $form_state['values']['fname'],
		'lname' => $form_state['values']['lname'],
		'age' => $ageValue,
		'colors' => $colorValue,
		'gender' => $genderValue,
		'music' => $musicList,
		'movie' => $movieValue,
		'day' => $dayValue,
		'user_id' => $user_id,
		'created' => time()
	))
	->execute();

  // Set the message to display on sucessesful submission
  drupal_set_message(t(variable_get('thank_you_message')));
}
